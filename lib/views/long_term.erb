<!DOCTYPE html>
<html>
  <head>
    <title>The Donald Monitor</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js" integrity="sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js" integrity="sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <script src="//cdn.jsdelivr.net/d3js/3.5.17/d3.min.js" charset="utf-8"></script>
    <script src="//cdn.jsdelivr.net/npm/taucharts@1/build/production/tauCharts.min.js" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/npm/taucharts@1/build/production/tauCharts.min.css">
    <style>
    .c {
    width: 960px;
    height: 180px;
    margin: 0;
    padding: 0;
    float: left;
    }
    .chart{
      height: 360px;
    }
    </style>
    <script>
      var days = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
      var shortDays = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
      var months = ["January","February","March","April","May","June","July","August","September","October","November","December"];
      var shortMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

      function zeropad(n) {
          return n > 9 ? String(n) : "0" + String(n);
      }

      function twelveHour(t) {
          var hour = t.getHours() % 12;
          return hour === 0 ? 12 : hour;
      }

      var strftimeCallbacks = {
          // Short day name (Sun-Sat)
          a: function (t) { return shortDays[t.getDay()]; },
          // Long day name (Sunday-Saturday)
          A: function (t) { return days[t.getDay()]; },
          // Short month name (Jan-Dec)
          b: function (t) { return shortMonths[t.getMonth()]; },
          // Long month name (January-December)
          B: function (t) { return months[t.getMonth()]; },
          // String representation (Thu Dec 23 2010 11:48:54 GMT-0800 (PST))
          c: function (t) { return t.toString(); },
          // Two-digit day of the month (01-31)
          d: function (t) { return zeropad(t.getDate()); },
          // Day of the month (1-31)
          D: function (t) { return String(t.getDate()); },
          // Two digit hour in 24-hour format (00-23)
          H: function (t) { return zeropad(t.getHours()); },
          // Hour in 24-hour format (0-23)
          i: function (t) { return String(t.getHours()); },
          // Two digit hour in 12-hour format (01-12)
          I: function (t) { return zeropad(twelveHour(t)); },
          // Hour in 12-hour format (1-12)
          l: function (t) { return String(twelveHour(t)); },
          // Two digit month (01-12)
          m: function (t) { return zeropad(t.getMonth() + 1); },
          // Two digit minutes (00-59)
          M: function (t) { return zeropad(t.getMinutes()); },
          // am or pm
          p: function (t) { return t.getHours() < 12 ? "am" : "pm"; },
          // AM or PM
          P: function (t) { return t.getHours() < 12 ? "AM" : "PM"; },
          // Two digit seconds (00-61)
          S: function (t) { return zeropad(t.getSeconds()); },
          // Zero-based day of the week (0-6)
          w: function (t) { return String(t.getDay()); },
          // Locale-specific date representation
          x: function (t) { return t.toLocaleDateString(); },
          // Locale-specific time representation
          X: function (t) { return t.toLocaleTimeString(); },
          // Year without century (00-99)
          y: function (t) { return zeropad(t.getFullYear() % 100); },
          // Year with century
          Y: function (t) { return String(t.getFullYear()); },
          // Timezone offset (+0000)
          Z: function (t) {
                   if (t.getTimezoneOffset() > 0) {
                       return "-" + zeropad(t.getTimezoneOffset() / 60) + "00";
                   } else {
                       return "+" + zeropad(Math.abs(t.getTimezoneOffset()) / 60) + "00";
                   }
               },
          // A percent sign
          "%": function (t) { return "%"; }
      };

      /**
       * Returns a string of the +date+ in the given +format+.
       */
      function strftime(date, format) {
          var regexp;
          for (var symbol in strftimeCallbacks) {
              regexp = new RegExp("%" + symbol, "g");
              format = format.replace(regexp, strftimeCallbacks[symbol](date));
          }

          return format;
      }
      function newChart(chartData, target){
        if ($('#'+target)[0] != null){
          new tauCharts.Chart({
            data: chartData,
            type: 'scatterplot',
            x: 'date',
            y: 'value',
            color: 'relative_value',
            guide: {
              showAnchors: 'always',
              interpolate: "smooth-keep-extremum",
              color: {
                brewer: { higher: '#28a745', lower: '#dc3545', similar: '#17a2b8' }
              }
            },
            plugins: [
              tauCharts.api.plugins.get('tooltip')()
            ]
          }).renderTo('#'+target);          
        }
      }
      function genRow(scores, metric, date){
        if (scores["reference"]!= null){
          if (scores["observed"]["content"]["core_stats"][metric]-scores["observed"]["content"]["core_stats"][metric]*0.15 > scores["reference"]["content"]["core_stats"][metric]) {
            return {date: date, value: scores["observed"]["content"]["core_stats"][metric], relative_value: "higher"}
          } else if (scores["observed"]["content"]["core_stats"][metric]+scores["observed"]["content"]["core_stats"][metric]*0.15 < scores["reference"]["content"]["core_stats"][metric]) {
            return {date: date, value: scores["observed"]["content"]["core_stats"][metric], relative_value: "lower"}
          } else {
            return {date: date, value: scores["observed"]["content"]["core_stats"][metric], relative_value: "similar"}            
          }
        }
      }
      function sum(list){
        if (list.length == 0){
          return 0.001
        } else {
          return list.reduce(function(a, b) { return a + b; });          
        }
      }
      function urlValues(dictionary, subkey){
        vals = []
        for (var key in dictionary){
          vals.push(dictionary[key][subkey])
        }
        return vals
      }
      function genURLTimelineCharts(parsed){
        date_timeline = {}
        date_timeline_comment_scaled = {}
        date_timeline_karma_scaled = {}
        for (var date_str in parsed) {
          var date = new Date(Date.parse(date_str));
          scores = parsed[date_str]
          out_date_str = strftime(date, "%Y-%m-%d")
          total_count = sum(urlValues(scores["observed"]["content"]["url_stats"], "count"))
          total_comment_count = sum(urlValues(scores["observed"]["content"]["url_stats"], "num_comment_count"))
          total_karma_count = sum(urlValues(scores["observed"]["content"]["url_stats"], "karma_count"))
          if (date_timeline[date_str] == null){
            date_timeline[date_str] = {"image": 0, "selftext": 0, "video": 0, "conservative_news": 0, "tweet": 0, "screenshot_site": 0, "facebook": 0, "news": 0, "google": 0, "administration": 0, "wikipedia": 0, "other": 0, "uncategorized": 0}
            date_timeline_comment_scaled[date_str] = {"image": 0, "selftext": 0, "video": 0, "conservative_news": 0, "tweet": 0, "screenshot_site": 0, "facebook": 0, "news": 0, "google": 0, "administration": 0, "wikipedia": 0, "other": 0, "uncategorized": 0}
            date_timeline_karma_scaled[date_str] = {"image": 0, "selftext": 0, "video": 0, "conservative_news": 0, "tweet": 0, "screenshot_site": 0, "facebook": 0, "news": 0, "google": 0, "administration": 0, "wikipedia": 0, "other": 0, "uncategorized": 0}
          }
          for (var site_type in scores["observed"]["content"]["url_stats"]){
            date_timeline[date_str][site_type] += scores["observed"]["content"]["url_stats"][site_type]["count"]/total_count
            date_timeline_comment_scaled[date_str][site_type] += scores["observed"]["content"]["url_stats"][site_type]["num_comment_count"]/total_comment_count
            date_timeline_karma_scaled[date_str][site_type] += scores["observed"]["content"]["url_stats"][site_type]["karma_count"]/total_karma_count
          }
        }
        data = []
        data_comment_scaled = []
        data_karma_scaled = []
        for (var date_key in date_timeline) {
          $.each(["administration", "conservative_news", "facebook", "google", "image", "news", "other", "screenshot_site", "selftext", "tweet", "video", "wikipedia"], function (index, content_type){
            if (isNaN(date_timeline[date_key][content_type]) == false){
              data.push({type: content_type, date: date_key, value: date_timeline[date_key][content_type]})
              data_comment_scaled.push({type: content_type, date: date_key, value: date_timeline_comment_scaled[date_key][content_type]})
              data_karma_scaled.push({type: content_type, date: date_key, value: date_timeline_karma_scaled[date_key][content_type]})
            }            
          })
        }
        new tauCharts.Chart({
            type: 'stacked-bar',
            x: 'date',
            y: 'value',
            color: 'type',
            data: data,
            plugins: [
              tauCharts.api.plugins.get('tooltip')()
            ]
        }).renderTo('#domain_shared_map');
        new tauCharts.Chart({
            type: 'stacked-bar',
            x: 'date',
            y: 'value',
            color: 'type',
            data: data_comment_scaled,
            plugins: [
              tauCharts.api.plugins.get('tooltip')()
            ]
        }).renderTo('#domain_shared_map_comment_scaled');
        new tauCharts.Chart({
            type: 'stacked-bar',
            x: 'date',
            y: 'value',
            color: 'type',
            data: data_karma_scaled,
            plugins: [
              tauCharts.api.plugins.get('tooltip')()
            ]
        }).renderTo('#domain_shared_map_karma_scaled');
      }
      function genContentCharts(parsed){
        var core_metrics = {"comments_admin_deleted_count": [], "comments_admin_deleted_time": [], "comments_admin_karma_deletion": [], "comments_admin_karma_deletion_speed": [], "comments_author_deleted_count": [], "comments_author_deleted_time": [], "comments_author_karma_deletion": [], "comments_author_karma_deletion_speed": [], "comments_count": [], "comments_distinct_admin_deleted_count": [], "comments_distinct_author_deleted_count": [], "comments_distinct_count": [], "submissions_admin_deleted_count": [], "submissions_admin_deleted_time": [], "submissions_admin_karma_deletion": [], "submissions_admin_karma_deletion_speed": [], "submissions_author_deleted_count": [], "submissions_author_deleted_time": [], "submissions_author_karma_deletion": [], "submissions_author_karma_deletion_speed": [], "submissions_count": [], "submissions_distinct_admin_deleted_count": [], "submissions_distinct_author_deleted_count": [], "submissions_distinct_count": [], "subscriber_counts": [], "avg_active_pct": []}
        for (var date_str in parsed) {
          var date = new Date(Date.parse(date_str));
          scores = parsed[date_str]
          out_date_str = strftime(date, "%Y-%m-%d")
          for (var metric in core_metrics){
            row = genRow(scores, metric, date)
            if (row != null){
              core_metrics[metric].push(row)
            }
          }
        }
        for (var metric in core_metrics){
          newChart(core_metrics[metric], metric)
        }
      }
      $.get("/api/long_term_trends.json", function(data, status){
        parsed = jQuery.parseJSON(data);
        genContentCharts(parsed)
        genURLTimelineCharts(parsed)
        g = 1
      });
    </script>
  </head>
  <body>
    <div class="container">
      <div class="row">
        <div class="col-md-12">
          <h1>The Donald Monitor: Long Term Trends</h1>
          <p>Monitoring the evolution of the Donald Subreddit</p>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h2>Core Statistics</h1>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Daily Comments</h3>
          <div id="comments_count" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Daily Active Commenters</h3>
          <div id="comments_distinct_count" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Daily Submissions</h3>
          <div id="submissions_count" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Daily Active Submitters</h3>
          <div id="submissions_distinct_count" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>New Subsribers per hour</h3>
          <div id="subscriber_counts" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Average Percent of Subscribers online</h3>
          <div id="avg_active_pct" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h2>Content Sources</h1>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Number of Submissions by link category</h3>
          <div id="domain_shared_map" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Number of Submissions by link category, scaled by comment count</h3>
          <div id="domain_shared_map_comment_scaled" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Number of Submissions by link category, scaled by karma count</h3>
          <div id="domain_shared_map_karma_scaled" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h2>Secondary Statistics</h1>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Number of Admin-deleted Comments</h3>
          <div id="comments_admin_deleted_count" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Average karma score of Admin-deleted Comments</h3>
          <div id="comments_admin_karma_deletion" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Number of Author-deleted Comments</h3>
          <div id="comments_author_deleted_count" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Average karma score of Author-deleted Comments</h3>
          <div id="comments_author_karma_deletion" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Distinct Authors count for Admin-deleted comments</h3>
          <div id="submissions_distinct_author_deleted_count" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Number of Admin-deleted Submissions</h3>
          <div id="submissions_admin_deleted_count" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Average karma score of Admin-deleted Submissions</h3>
          <div id="submissions_admin_karma_deletion" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Number of Author-deleted Submissions</h3>
          <div id="submissions_author_deleted_count" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Average karma score of Author-deleted Submissions</h3>
          <div id="submissions_author_karma_deletion" class="c chart"></div>
        </div>
      </div>
      <div class="row">
        <div class="col-md-12">
          <h3>Distinct Authors count for Admin-deleted submissions</h3>
          <div id="submissions_distinct_admin_deleted_count" class="c chart"></div>
        </div>
      </div>
    </div>
  </body>
</html>